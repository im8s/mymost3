// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: br.proto

#include "br.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pb {
constexpr LotteryState::LotteryState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
  , code_(0){}
struct LotteryStateDefaultTypeInternal {
  constexpr LotteryStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LotteryStateDefaultTypeInternal() {}
  union {
    LotteryState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LotteryStateDefaultTypeInternal _LotteryState_default_instance_;
constexpr LotteryServer::LotteryServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : servertime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LotteryServerDefaultTypeInternal {
  constexpr LotteryServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LotteryServerDefaultTypeInternal() {}
  union {
    LotteryServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LotteryServerDefaultTypeInternal _LotteryServer_default_instance_;
constexpr LotteryInfo::LotteryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : periods_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , begintime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , opentime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , collecttime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , opencontent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LotteryInfoDefaultTypeInternal {
  constexpr LotteryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LotteryInfoDefaultTypeInternal() {}
  union {
    LotteryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LotteryInfoDefaultTypeInternal _LotteryInfo_default_instance_;
constexpr LotteryList::LotteryList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lotterys_(){}
struct LotteryListDefaultTypeInternal {
  constexpr LotteryListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LotteryListDefaultTypeInternal() {}
  union {
    LotteryList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LotteryListDefaultTypeInternal _LotteryList_default_instance_;
constexpr LotteryNext::LotteryNext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lotinfo_(nullptr){}
struct LotteryNextDefaultTypeInternal {
  constexpr LotteryNextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LotteryNextDefaultTypeInternal() {}
  union {
    LotteryNext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LotteryNextDefaultTypeInternal _LotteryNext_default_instance_;
constexpr LotteryLatest::LotteryLatest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lotinfo_(nullptr){}
struct LotteryLatestDefaultTypeInternal {
  constexpr LotteryLatestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LotteryLatestDefaultTypeInternal() {}
  union {
    LotteryLatest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LotteryLatestDefaultTypeInternal _LotteryLatest_default_instance_;
constexpr LotteryRequest::LotteryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0){}
struct LotteryRequestDefaultTypeInternal {
  constexpr LotteryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LotteryRequestDefaultTypeInternal() {}
  union {
    LotteryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LotteryRequestDefaultTypeInternal _LotteryRequest_default_instance_;
constexpr LotteryResponse::LotteryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct LotteryResponseDefaultTypeInternal {
  constexpr LotteryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LotteryResponseDefaultTypeInternal() {}
  union {
    LotteryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LotteryResponseDefaultTypeInternal _LotteryResponse_default_instance_;
}  // namespace pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_br_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_br_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_br_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_br_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryState, type_),
  PROTOBUF_FIELD_OFFSET(::pb::LotteryState, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryServer, servertime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryInfo, periods_),
  PROTOBUF_FIELD_OFFSET(::pb::LotteryInfo, begintime_),
  PROTOBUF_FIELD_OFFSET(::pb::LotteryInfo, opentime_),
  PROTOBUF_FIELD_OFFSET(::pb::LotteryInfo, collecttime_),
  PROTOBUF_FIELD_OFFSET(::pb::LotteryInfo, opencontent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryList, lotterys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryNext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryNext, lotinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryLatest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryLatest, lotinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::LotteryResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pb::LotteryResponse, Data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::LotteryState)},
  { 7, -1, sizeof(::pb::LotteryServer)},
  { 13, -1, sizeof(::pb::LotteryInfo)},
  { 23, -1, sizeof(::pb::LotteryList)},
  { 29, -1, sizeof(::pb::LotteryNext)},
  { 35, -1, sizeof(::pb::LotteryLatest)},
  { 41, -1, sizeof(::pb::LotteryRequest)},
  { 47, -1, sizeof(::pb::LotteryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LotteryState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LotteryServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LotteryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LotteryList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LotteryNext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LotteryLatest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LotteryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LotteryResponse_default_instance_),
};

const char descriptor_table_protodef_br_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010br.proto\022\002pb\"*\n\014LotteryState\022\014\n\004Type\030\001"
  " \001(\005\022\014\n\004Code\030\002 \001(\005\"#\n\rLotteryServer\022\022\n\nS"
  "erverTime\030\001 \001(\t\"m\n\013LotteryInfo\022\017\n\007Period"
  "s\030\001 \001(\t\022\021\n\tBeginTime\030\002 \001(\t\022\020\n\010OpenTime\030\003"
  " \001(\t\022\023\n\013CollectTime\030\004 \001(\t\022\023\n\013OpenContent"
  "\030\005 \001(\t\"0\n\013LotteryList\022!\n\010Lotterys\030\001 \003(\0132"
  "\017.pb.LotteryInfo\"/\n\013LotteryNext\022 \n\007LotIn"
  "fo\030\001 \001(\0132\017.pb.LotteryInfo\"1\n\rLotteryLate"
  "st\022 \n\007LotInfo\030\001 \001(\0132\017.pb.LotteryInfo\"\036\n\016"
  "LotteryRequest\022\014\n\004Type\030\001 \001(\005\"\330\001\n\017Lottery"
  "Response\022%\n\tLotStatus\030\001 \001(\0132\020.pb.Lottery"
  "StateH\000\022&\n\tLotServer\030\002 \001(\0132\021.pb.LotteryS"
  "erverH\000\022\"\n\007LotList\030\003 \001(\0132\017.pb.LotteryLis"
  "tH\000\022\"\n\007LotNext\030\004 \001(\0132\017.pb.LotteryNextH\000\022"
  "&\n\tLotLatest\030\005 \001(\0132\021.pb.LotteryLatestH\000B"
  "\006\n\004Data2K\n\014LotteryQuery\022;\n\020FetchLotteryI"
  "nfo\022\022.pb.LotteryRequest\032\023.pb.LotteryResp"
  "onseB\014Z\005./;pb\252\002\002Pbb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_br_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_br_2eproto = {
  false, false, 706, descriptor_table_protodef_br_2eproto, "br.proto", 
  &descriptor_table_br_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_br_2eproto::offsets,
  file_level_metadata_br_2eproto, file_level_enum_descriptors_br_2eproto, file_level_service_descriptors_br_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_br_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_br_2eproto);
  return descriptor_table_br_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_br_2eproto(&descriptor_table_br_2eproto);
namespace pb {

// ===================================================================

class LotteryState::_Internal {
 public:
};

LotteryState::LotteryState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LotteryState)
}
LotteryState::LotteryState(const LotteryState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&type_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:pb.LotteryState)
}

void LotteryState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&type_)) + sizeof(code_));
}

LotteryState::~LotteryState() {
  // @@protoc_insertion_point(destructor:pb.LotteryState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LotteryState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LotteryState::ArenaDtor(void* object) {
  LotteryState* _this = reinterpret_cast< LotteryState* >(object);
  (void)_this;
}
void LotteryState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LotteryState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LotteryState::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LotteryState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&type_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LotteryState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LotteryState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LotteryState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 Code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LotteryState)
  return target;
}

size_t LotteryState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LotteryState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 Code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LotteryState)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LotteryState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LotteryState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LotteryState)
    MergeFrom(*source);
  }
}

void LotteryState::MergeFrom(const LotteryState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LotteryState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void LotteryState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LotteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryState::CopyFrom(const LotteryState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LotteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryState::IsInitialized() const {
  return true;
}

void LotteryState::InternalSwap(LotteryState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LotteryState, code_)
      + sizeof(LotteryState::code_)
      - PROTOBUF_FIELD_OFFSET(LotteryState, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LotteryState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LotteryServer::_Internal {
 public:
};

LotteryServer::LotteryServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LotteryServer)
}
LotteryServer::LotteryServer(const LotteryServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servertime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servertime().empty()) {
    servertime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servertime(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.LotteryServer)
}

void LotteryServer::SharedCtor() {
servertime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LotteryServer::~LotteryServer() {
  // @@protoc_insertion_point(destructor:pb.LotteryServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LotteryServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servertime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LotteryServer::ArenaDtor(void* object) {
  LotteryServer* _this = reinterpret_cast< LotteryServer* >(object);
  (void)_this;
}
void LotteryServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LotteryServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LotteryServer::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LotteryServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servertime_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LotteryServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ServerTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_servertime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.LotteryServer.ServerTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LotteryServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LotteryServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServerTime = 1;
  if (this->servertime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servertime().data(), static_cast<int>(this->_internal_servertime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.LotteryServer.ServerTime");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servertime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LotteryServer)
  return target;
}

size_t LotteryServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LotteryServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServerTime = 1;
  if (this->servertime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servertime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LotteryServer)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LotteryServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LotteryServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LotteryServer)
    MergeFrom(*source);
  }
}

void LotteryServer::MergeFrom(const LotteryServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LotteryServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servertime().size() > 0) {
    _internal_set_servertime(from._internal_servertime());
  }
}

void LotteryServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LotteryServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryServer::CopyFrom(const LotteryServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LotteryServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryServer::IsInitialized() const {
  return true;
}

void LotteryServer::InternalSwap(LotteryServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servertime_.Swap(&other->servertime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LotteryServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LotteryInfo::_Internal {
 public:
};

LotteryInfo::LotteryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LotteryInfo)
}
LotteryInfo::LotteryInfo(const LotteryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  periods_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_periods().empty()) {
    periods_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_periods(), 
      GetArena());
  }
  begintime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_begintime().empty()) {
    begintime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_begintime(), 
      GetArena());
  }
  opentime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opentime().empty()) {
    opentime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opentime(), 
      GetArena());
  }
  collecttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collecttime().empty()) {
    collecttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collecttime(), 
      GetArena());
  }
  opencontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opencontent().empty()) {
    opencontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opencontent(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.LotteryInfo)
}

void LotteryInfo::SharedCtor() {
periods_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
begintime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
opentime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
collecttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
opencontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LotteryInfo::~LotteryInfo() {
  // @@protoc_insertion_point(destructor:pb.LotteryInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LotteryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  periods_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  begintime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opentime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collecttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opencontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LotteryInfo::ArenaDtor(void* object) {
  LotteryInfo* _this = reinterpret_cast< LotteryInfo* >(object);
  (void)_this;
}
void LotteryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LotteryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LotteryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LotteryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  periods_.ClearToEmpty();
  begintime_.ClearToEmpty();
  opentime_.ClearToEmpty();
  collecttime_.ClearToEmpty();
  opencontent_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LotteryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Periods = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_periods();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.LotteryInfo.Periods"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string BeginTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_begintime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.LotteryInfo.BeginTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OpenTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_opentime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.LotteryInfo.OpenTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CollectTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_collecttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.LotteryInfo.CollectTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OpenContent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_opencontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.LotteryInfo.OpenContent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LotteryInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LotteryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Periods = 1;
  if (this->periods().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_periods().data(), static_cast<int>(this->_internal_periods().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.LotteryInfo.Periods");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_periods(), target);
  }

  // string BeginTime = 2;
  if (this->begintime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_begintime().data(), static_cast<int>(this->_internal_begintime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.LotteryInfo.BeginTime");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_begintime(), target);
  }

  // string OpenTime = 3;
  if (this->opentime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opentime().data(), static_cast<int>(this->_internal_opentime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.LotteryInfo.OpenTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_opentime(), target);
  }

  // string CollectTime = 4;
  if (this->collecttime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collecttime().data(), static_cast<int>(this->_internal_collecttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.LotteryInfo.CollectTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_collecttime(), target);
  }

  // string OpenContent = 5;
  if (this->opencontent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opencontent().data(), static_cast<int>(this->_internal_opencontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.LotteryInfo.OpenContent");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_opencontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LotteryInfo)
  return target;
}

size_t LotteryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LotteryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Periods = 1;
  if (this->periods().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_periods());
  }

  // string BeginTime = 2;
  if (this->begintime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_begintime());
  }

  // string OpenTime = 3;
  if (this->opentime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opentime());
  }

  // string CollectTime = 4;
  if (this->collecttime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collecttime());
  }

  // string OpenContent = 5;
  if (this->opencontent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opencontent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LotteryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LotteryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LotteryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LotteryInfo)
    MergeFrom(*source);
  }
}

void LotteryInfo::MergeFrom(const LotteryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LotteryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.periods().size() > 0) {
    _internal_set_periods(from._internal_periods());
  }
  if (from.begintime().size() > 0) {
    _internal_set_begintime(from._internal_begintime());
  }
  if (from.opentime().size() > 0) {
    _internal_set_opentime(from._internal_opentime());
  }
  if (from.collecttime().size() > 0) {
    _internal_set_collecttime(from._internal_collecttime());
  }
  if (from.opencontent().size() > 0) {
    _internal_set_opencontent(from._internal_opencontent());
  }
}

void LotteryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LotteryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryInfo::CopyFrom(const LotteryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LotteryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryInfo::IsInitialized() const {
  return true;
}

void LotteryInfo::InternalSwap(LotteryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  periods_.Swap(&other->periods_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  begintime_.Swap(&other->begintime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opentime_.Swap(&other->opentime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collecttime_.Swap(&other->collecttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opencontent_.Swap(&other->opencontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LotteryInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LotteryList::_Internal {
 public:
};

LotteryList::LotteryList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lotterys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LotteryList)
}
LotteryList::LotteryList(const LotteryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lotterys_(from.lotterys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.LotteryList)
}

void LotteryList::SharedCtor() {
}

LotteryList::~LotteryList() {
  // @@protoc_insertion_point(destructor:pb.LotteryList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LotteryList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LotteryList::ArenaDtor(void* object) {
  LotteryList* _this = reinterpret_cast< LotteryList* >(object);
  (void)_this;
}
void LotteryList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LotteryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LotteryList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LotteryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lotterys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LotteryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.LotteryInfo Lotterys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lotterys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LotteryList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LotteryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.LotteryInfo Lotterys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lotterys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lotterys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LotteryList)
  return target;
}

size_t LotteryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LotteryList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.LotteryInfo Lotterys = 1;
  total_size += 1UL * this->_internal_lotterys_size();
  for (const auto& msg : this->lotterys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LotteryList)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LotteryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LotteryList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LotteryList)
    MergeFrom(*source);
  }
}

void LotteryList::MergeFrom(const LotteryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LotteryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lotterys_.MergeFrom(from.lotterys_);
}

void LotteryList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LotteryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryList::CopyFrom(const LotteryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LotteryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryList::IsInitialized() const {
  return true;
}

void LotteryList::InternalSwap(LotteryList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lotterys_.InternalSwap(&other->lotterys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LotteryList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LotteryNext::_Internal {
 public:
  static const ::pb::LotteryInfo& lotinfo(const LotteryNext* msg);
};

const ::pb::LotteryInfo&
LotteryNext::_Internal::lotinfo(const LotteryNext* msg) {
  return *msg->lotinfo_;
}
LotteryNext::LotteryNext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LotteryNext)
}
LotteryNext::LotteryNext(const LotteryNext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lotinfo()) {
    lotinfo_ = new ::pb::LotteryInfo(*from.lotinfo_);
  } else {
    lotinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.LotteryNext)
}

void LotteryNext::SharedCtor() {
lotinfo_ = nullptr;
}

LotteryNext::~LotteryNext() {
  // @@protoc_insertion_point(destructor:pb.LotteryNext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LotteryNext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lotinfo_;
}

void LotteryNext::ArenaDtor(void* object) {
  LotteryNext* _this = reinterpret_cast< LotteryNext* >(object);
  (void)_this;
}
void LotteryNext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LotteryNext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LotteryNext::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LotteryNext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && lotinfo_ != nullptr) {
    delete lotinfo_;
  }
  lotinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LotteryNext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.LotteryInfo LotInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lotinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LotteryNext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LotteryNext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.LotteryInfo LotInfo = 1;
  if (this->has_lotinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lotinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LotteryNext)
  return target;
}

size_t LotteryNext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LotteryNext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.LotteryInfo LotInfo = 1;
  if (this->has_lotinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lotinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryNext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LotteryNext)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryNext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LotteryNext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LotteryNext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LotteryNext)
    MergeFrom(*source);
  }
}

void LotteryNext::MergeFrom(const LotteryNext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LotteryNext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lotinfo()) {
    _internal_mutable_lotinfo()->::pb::LotteryInfo::MergeFrom(from._internal_lotinfo());
  }
}

void LotteryNext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LotteryNext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryNext::CopyFrom(const LotteryNext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LotteryNext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryNext::IsInitialized() const {
  return true;
}

void LotteryNext::InternalSwap(LotteryNext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(lotinfo_, other->lotinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LotteryNext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LotteryLatest::_Internal {
 public:
  static const ::pb::LotteryInfo& lotinfo(const LotteryLatest* msg);
};

const ::pb::LotteryInfo&
LotteryLatest::_Internal::lotinfo(const LotteryLatest* msg) {
  return *msg->lotinfo_;
}
LotteryLatest::LotteryLatest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LotteryLatest)
}
LotteryLatest::LotteryLatest(const LotteryLatest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lotinfo()) {
    lotinfo_ = new ::pb::LotteryInfo(*from.lotinfo_);
  } else {
    lotinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.LotteryLatest)
}

void LotteryLatest::SharedCtor() {
lotinfo_ = nullptr;
}

LotteryLatest::~LotteryLatest() {
  // @@protoc_insertion_point(destructor:pb.LotteryLatest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LotteryLatest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lotinfo_;
}

void LotteryLatest::ArenaDtor(void* object) {
  LotteryLatest* _this = reinterpret_cast< LotteryLatest* >(object);
  (void)_this;
}
void LotteryLatest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LotteryLatest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LotteryLatest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LotteryLatest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && lotinfo_ != nullptr) {
    delete lotinfo_;
  }
  lotinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LotteryLatest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.LotteryInfo LotInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lotinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LotteryLatest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LotteryLatest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.LotteryInfo LotInfo = 1;
  if (this->has_lotinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lotinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LotteryLatest)
  return target;
}

size_t LotteryLatest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LotteryLatest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.LotteryInfo LotInfo = 1;
  if (this->has_lotinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lotinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryLatest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LotteryLatest)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryLatest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LotteryLatest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LotteryLatest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LotteryLatest)
    MergeFrom(*source);
  }
}

void LotteryLatest::MergeFrom(const LotteryLatest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LotteryLatest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lotinfo()) {
    _internal_mutable_lotinfo()->::pb::LotteryInfo::MergeFrom(from._internal_lotinfo());
  }
}

void LotteryLatest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LotteryLatest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryLatest::CopyFrom(const LotteryLatest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LotteryLatest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryLatest::IsInitialized() const {
  return true;
}

void LotteryLatest::InternalSwap(LotteryLatest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(lotinfo_, other->lotinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LotteryLatest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LotteryRequest::_Internal {
 public:
};

LotteryRequest::LotteryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LotteryRequest)
}
LotteryRequest::LotteryRequest(const LotteryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pb.LotteryRequest)
}

void LotteryRequest::SharedCtor() {
type_ = 0;
}

LotteryRequest::~LotteryRequest() {
  // @@protoc_insertion_point(destructor:pb.LotteryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LotteryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LotteryRequest::ArenaDtor(void* object) {
  LotteryRequest* _this = reinterpret_cast< LotteryRequest* >(object);
  (void)_this;
}
void LotteryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LotteryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LotteryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LotteryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LotteryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LotteryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LotteryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LotteryRequest)
  return target;
}

size_t LotteryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LotteryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LotteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LotteryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LotteryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LotteryRequest)
    MergeFrom(*source);
  }
}

void LotteryRequest::MergeFrom(const LotteryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LotteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void LotteryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LotteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryRequest::CopyFrom(const LotteryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LotteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryRequest::IsInitialized() const {
  return true;
}

void LotteryRequest::InternalSwap(LotteryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LotteryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LotteryResponse::_Internal {
 public:
  static const ::pb::LotteryState& lotstatus(const LotteryResponse* msg);
  static const ::pb::LotteryServer& lotserver(const LotteryResponse* msg);
  static const ::pb::LotteryList& lotlist(const LotteryResponse* msg);
  static const ::pb::LotteryNext& lotnext(const LotteryResponse* msg);
  static const ::pb::LotteryLatest& lotlatest(const LotteryResponse* msg);
};

const ::pb::LotteryState&
LotteryResponse::_Internal::lotstatus(const LotteryResponse* msg) {
  return *msg->Data_.lotstatus_;
}
const ::pb::LotteryServer&
LotteryResponse::_Internal::lotserver(const LotteryResponse* msg) {
  return *msg->Data_.lotserver_;
}
const ::pb::LotteryList&
LotteryResponse::_Internal::lotlist(const LotteryResponse* msg) {
  return *msg->Data_.lotlist_;
}
const ::pb::LotteryNext&
LotteryResponse::_Internal::lotnext(const LotteryResponse* msg) {
  return *msg->Data_.lotnext_;
}
const ::pb::LotteryLatest&
LotteryResponse::_Internal::lotlatest(const LotteryResponse* msg) {
  return *msg->Data_.lotlatest_;
}
void LotteryResponse::set_allocated_lotstatus(::pb::LotteryState* lotstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Data();
  if (lotstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lotstatus);
    if (message_arena != submessage_arena) {
      lotstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lotstatus, submessage_arena);
    }
    set_has_lotstatus();
    Data_.lotstatus_ = lotstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.LotteryResponse.LotStatus)
}
void LotteryResponse::set_allocated_lotserver(::pb::LotteryServer* lotserver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Data();
  if (lotserver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lotserver);
    if (message_arena != submessage_arena) {
      lotserver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lotserver, submessage_arena);
    }
    set_has_lotserver();
    Data_.lotserver_ = lotserver;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.LotteryResponse.LotServer)
}
void LotteryResponse::set_allocated_lotlist(::pb::LotteryList* lotlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Data();
  if (lotlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lotlist);
    if (message_arena != submessage_arena) {
      lotlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lotlist, submessage_arena);
    }
    set_has_lotlist();
    Data_.lotlist_ = lotlist;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.LotteryResponse.LotList)
}
void LotteryResponse::set_allocated_lotnext(::pb::LotteryNext* lotnext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Data();
  if (lotnext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lotnext);
    if (message_arena != submessage_arena) {
      lotnext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lotnext, submessage_arena);
    }
    set_has_lotnext();
    Data_.lotnext_ = lotnext;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.LotteryResponse.LotNext)
}
void LotteryResponse::set_allocated_lotlatest(::pb::LotteryLatest* lotlatest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Data();
  if (lotlatest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lotlatest);
    if (message_arena != submessage_arena) {
      lotlatest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lotlatest, submessage_arena);
    }
    set_has_lotlatest();
    Data_.lotlatest_ = lotlatest;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.LotteryResponse.LotLatest)
}
LotteryResponse::LotteryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LotteryResponse)
}
LotteryResponse::LotteryResponse(const LotteryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Data();
  switch (from.Data_case()) {
    case kLotStatus: {
      _internal_mutable_lotstatus()->::pb::LotteryState::MergeFrom(from._internal_lotstatus());
      break;
    }
    case kLotServer: {
      _internal_mutable_lotserver()->::pb::LotteryServer::MergeFrom(from._internal_lotserver());
      break;
    }
    case kLotList: {
      _internal_mutable_lotlist()->::pb::LotteryList::MergeFrom(from._internal_lotlist());
      break;
    }
    case kLotNext: {
      _internal_mutable_lotnext()->::pb::LotteryNext::MergeFrom(from._internal_lotnext());
      break;
    }
    case kLotLatest: {
      _internal_mutable_lotlatest()->::pb::LotteryLatest::MergeFrom(from._internal_lotlatest());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.LotteryResponse)
}

void LotteryResponse::SharedCtor() {
clear_has_Data();
}

LotteryResponse::~LotteryResponse() {
  // @@protoc_insertion_point(destructor:pb.LotteryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LotteryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Data()) {
    clear_Data();
  }
}

void LotteryResponse::ArenaDtor(void* object) {
  LotteryResponse* _this = reinterpret_cast< LotteryResponse* >(object);
  (void)_this;
}
void LotteryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LotteryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LotteryResponse::clear_Data() {
// @@protoc_insertion_point(one_of_clear_start:pb.LotteryResponse)
  switch (Data_case()) {
    case kLotStatus: {
      if (GetArena() == nullptr) {
        delete Data_.lotstatus_;
      }
      break;
    }
    case kLotServer: {
      if (GetArena() == nullptr) {
        delete Data_.lotserver_;
      }
      break;
    }
    case kLotList: {
      if (GetArena() == nullptr) {
        delete Data_.lotlist_;
      }
      break;
    }
    case kLotNext: {
      if (GetArena() == nullptr) {
        delete Data_.lotnext_;
      }
      break;
    }
    case kLotLatest: {
      if (GetArena() == nullptr) {
        delete Data_.lotlatest_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void LotteryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LotteryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LotteryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.LotteryState LotStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lotstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.LotteryServer LotServer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lotserver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.LotteryList LotList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lotlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.LotteryNext LotNext = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lotnext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.LotteryLatest LotLatest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lotlatest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LotteryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LotteryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.LotteryState LotStatus = 1;
  if (_internal_has_lotstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lotstatus(this), target, stream);
  }

  // .pb.LotteryServer LotServer = 2;
  if (_internal_has_lotserver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lotserver(this), target, stream);
  }

  // .pb.LotteryList LotList = 3;
  if (_internal_has_lotlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lotlist(this), target, stream);
  }

  // .pb.LotteryNext LotNext = 4;
  if (_internal_has_lotnext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lotnext(this), target, stream);
  }

  // .pb.LotteryLatest LotLatest = 5;
  if (_internal_has_lotlatest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lotlatest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LotteryResponse)
  return target;
}

size_t LotteryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LotteryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Data_case()) {
    // .pb.LotteryState LotStatus = 1;
    case kLotStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Data_.lotstatus_);
      break;
    }
    // .pb.LotteryServer LotServer = 2;
    case kLotServer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Data_.lotserver_);
      break;
    }
    // .pb.LotteryList LotList = 3;
    case kLotList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Data_.lotlist_);
      break;
    }
    // .pb.LotteryNext LotNext = 4;
    case kLotNext: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Data_.lotnext_);
      break;
    }
    // .pb.LotteryLatest LotLatest = 5;
    case kLotLatest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Data_.lotlatest_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LotteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LotteryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LotteryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LotteryResponse)
    MergeFrom(*source);
  }
}

void LotteryResponse::MergeFrom(const LotteryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LotteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Data_case()) {
    case kLotStatus: {
      _internal_mutable_lotstatus()->::pb::LotteryState::MergeFrom(from._internal_lotstatus());
      break;
    }
    case kLotServer: {
      _internal_mutable_lotserver()->::pb::LotteryServer::MergeFrom(from._internal_lotserver());
      break;
    }
    case kLotList: {
      _internal_mutable_lotlist()->::pb::LotteryList::MergeFrom(from._internal_lotlist());
      break;
    }
    case kLotNext: {
      _internal_mutable_lotnext()->::pb::LotteryNext::MergeFrom(from._internal_lotnext());
      break;
    }
    case kLotLatest: {
      _internal_mutable_lotlatest()->::pb::LotteryLatest::MergeFrom(from._internal_lotlatest());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void LotteryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LotteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryResponse::CopyFrom(const LotteryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LotteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryResponse::IsInitialized() const {
  return true;
}

void LotteryResponse::InternalSwap(LotteryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(Data_, other->Data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LotteryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::LotteryState* Arena::CreateMaybeMessage< ::pb::LotteryState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LotteryState >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LotteryServer* Arena::CreateMaybeMessage< ::pb::LotteryServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LotteryServer >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LotteryInfo* Arena::CreateMaybeMessage< ::pb::LotteryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LotteryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LotteryList* Arena::CreateMaybeMessage< ::pb::LotteryList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LotteryList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LotteryNext* Arena::CreateMaybeMessage< ::pb::LotteryNext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LotteryNext >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LotteryLatest* Arena::CreateMaybeMessage< ::pb::LotteryLatest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LotteryLatest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LotteryRequest* Arena::CreateMaybeMessage< ::pb::LotteryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LotteryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LotteryResponse* Arena::CreateMaybeMessage< ::pb::LotteryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LotteryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
