package com.shiku.im.pay.service.impl;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.google.common.collect.Maps;import com.shiku.common.model.PageResult;import com.shiku.common.util.StringUtil;import com.shiku.im.comm.constants.KConstants;import com.shiku.im.comm.ex.ServiceException;import com.shiku.im.comm.utils.DateUtil;import com.shiku.im.pay.dao.ConsumeRecordDao;import com.shiku.im.pay.dao.TransferDao;import com.shiku.im.pay.dao.TransferReceiveDao;import com.shiku.im.pay.dto.BillRecordCountDTO;import com.shiku.im.pay.dto.ConsumRecordCountDTO;import com.shiku.im.pay.entity.BaseConsumeRecord;import com.shiku.im.pay.entity.ConsumeRecord;import com.shiku.im.pay.entity.Transfer;import com.shiku.im.user.service.UserCoreService;import lombok.extern.slf4j.Slf4j;import org.bson.types.ObjectId;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.math.BigDecimal;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.List;import java.util.Map;@Slf4j@Servicepublic class ConsumeRecordManagerImpl{		@Autowired	private ConsumeRecordDao consumeRecordDao;	@Autowired	private UserCoreService userCoreService;	@Autowired	private TransferDao transferDao;	@Autowired	private TransferReceiveDao transferReceiveDao;	public ConsumeRecordDao getConsumeRecordDao(){		return consumeRecordDao;	}	public void saveConsumeRecord(BaseConsumeRecord entity){		if(null==entity.getId())            consumeRecordDao.addConsumRecord(entity);		else            consumeRecordDao.updateConsumeRecord(entity.getId(),entity);	}	/**	 * 消费记录根据业务id，和业务type关联到对应业务	 * @param businessId	 */	public Object getConsumeRecordByBusinessId(String businessId,int type){		Object obj = null;		switch (type) {            case 7:            case 8:                obj = transferDao.getTransfer(new ObjectId(businessId));                break;			default:				break;		}		log.info("getConsumeRecordByBusinessId id ：{}，type : {},value :{}",businessId,type, JSON.toJSONString(obj));		return obj;	}	public PageResult<BaseConsumeRecord> getConsumeRecordByTradeNo(String tradeNo){		PageResult<BaseConsumeRecord> result = new PageResult<BaseConsumeRecord>();        BaseConsumeRecord record = consumeRecordDao.getConsumeRecordByTradeNo(tradeNo);		if(null != record){			record.setUserName(userCoreService.getNickName(record.getUserId()));			if(!StringUtil.isEmpty(record.getBusinessId())){				switch (record.getType()) {					// 转账和接受转账					case KConstants.ConsumeType.SEND_TRANSFER:					case KConstants.ConsumeType.RECEIVE_TRANSFER:						Transfer transfer = (Transfer) getConsumeRecordByBusinessId(record.getBusinessId(), record.getType());						record.setTransferRemark(transfer.getRemark());						record.setTransferStatus(transfer.getStatus());						break;					default:						break;				}			}		}else{			throw new ServiceException("无该消费记录");		}		List<BaseConsumeRecord> records = new ArrayList<BaseConsumeRecord>();		records.add(record);		result.setData(records);		result.setCount(records.size());		return result;	}	public BaseConsumeRecord getConsumeRecordByNo(String tradeNo){        return consumeRecordDao.getConsumeRecordByTradeNo(tradeNo);	}		public BaseConsumeRecord getConsumeReCord(Integer userId, ObjectId id){        return consumeRecordDao.getConsumeReCord(id,userId);	}	public  List<BaseConsumeRecord> reChargeList(Integer userId ,int pageIndex,int pageSize){        List<BaseConsumeRecord> pageData = consumeRecordDao.getConsumRecordList(KConstants.MOENY_ADD,userId,pageIndex,pageSize);		return pageData;	}			public PageResult<BaseConsumeRecord> consumeRecordList(Integer userId, int page, int limit, byte state, String startDate, String endDate, int type){				PageResult<BaseConsumeRecord>  result = new PageResult<BaseConsumeRecord>();//		List<BaseConsumeRecord> consumeRecords = new ArrayList<>();		Map<String, Object> totalVO = Maps.newConcurrentMap();//		final DBCollection collection = SKBeanUtils.getDatastore().getDB().getCollection("BaseConsumeRecord");//		List<DBObject> pipeline=new ArrayList<>();//		BasicDBObject basicDBObject = new BasicDBObject("userId",userId).append("status", KConstants.OrderStatus.END);//		if(0 != type)//			basicDBObject.append("type", type);		long startTime = 0; //开始时间（秒）		long endTime = 0; //结束时间（秒）,默认为当前时间		long formateEndtime = 0;		if(!StringUtil.isEmpty(startDate) && !StringUtil.isEmpty(endDate)){			startTime = StringUtil.isEmpty(startDate) ? 0 : DateUtil.toDate(startDate).getTime()/1000;			endTime = StringUtil.isEmpty(endDate) ? DateUtil.currentTimeSeconds() : DateUtil.toDate(endDate).getTime()/1000;			formateEndtime = DateUtil.getOnedayNextDay(endTime,1,0);//			basicDBObject.append("time", new BasicDBObject(MongoOperator.GT,startTime)).append("time", new BasicDBObject(MongoOperator.LT,formateEndtime));		}		result = consumeRecordDao.queryConsumRecordList(userId,KConstants.OrderStatus.END,type,startTime,formateEndtime,page,limit,(byte)1);		Map<String,Object> map = consumeRecordDao.queryConsumRecord(userId,KConstants.OrderStatus.END,type,startTime,formateEndtime,page,limit,(byte)1);		totalVO.put("totalTecharge", new DecimalFormat("0.00").format(map.get("totalTecharge")));		totalVO.put("totalCash", new DecimalFormat("0.00").format(map.get("totalCash")));		totalVO.put("totalTransfer", new DecimalFormat("0.00").format(map.get("totalTransfer")));		totalVO.put("sendPacket", new DecimalFormat("0.00").format(map.get("sendPacket")));		totalVO.put("receivePacket", new DecimalFormat("0.00").format(map.get("receivePacket")));		totalVO.put("totalAccount", new DecimalFormat("0.00").format(map.get("totalAccount")));		result.setTotalVo(JSONObject.toJSONString(totalVO));		log.info("当前总充值 totalTecharge :{}  总提现 totalCash :{}  总转出 totalTransfer :{}  总转入 totalAccount :{}  总发送红包 sendPacket :{}  总接收红包 receivePacket :{}"				,map.get("totalTecharge"),map.get("totalCash"),map.get("totalTransfer"),map.get("totalAccount"),map.get("sendPacket"),map.get("receivePacket"));		return result;	}		public PageResult<BaseConsumeRecord> consumeRecordList(Integer userId, int page, int limit, byte state){			PageResult<BaseConsumeRecord>  result = new PageResult<BaseConsumeRecord>();		result = consumeRecordDao.getConsumrecordList(userId,0,KConstants.OrderStatus.END,page,limit,state);		return result;	}		public BaseConsumeRecord consumeRecordList(String tradeNo){		        return consumeRecordDao.getConsumRecord(tradeNo,KConstants.OrderStatus.END);	}		public PageResult<BaseConsumeRecord> friendRecordList(Integer userId, int toUserId,                                                          int page, int limit, byte start){				PageResult<BaseConsumeRecord>  result = new PageResult<BaseConsumeRecord>();//		Query<BaseConsumeRecord> q = repository.createQuery().order("-time");//		if(0!=userId)//			q.filter("userId", userId);//		if(0!=toUserId)//			q.filter("toUserId", toUserId);////			q.field("money").greaterThan(0);//			q.filter("status", KConstants.OrderStatus.END);//			q.field("type").greaterThan(3);		result = consumeRecordDao.getConsumrecordList(userId,toUserId,0,KConstants.OrderStatus.END,3,page,limit,start);//			result.setData(q.asList(pageFindOption(page, limit, start)));////			result.setCount(q.count());		return result;	}			/** @Description:（用户充值记录） 	* @param userId	* @param type	* @param page	* @param limit	* @return	**/ 	public PageResult<BaseConsumeRecord> recharge(int userId, int type, int page, int limit, String startDate, String endDate, String tradeNo){		double totalMoney = 0;		PageResult<BaseConsumeRecord> result = new PageResult<BaseConsumeRecord>();//		Query<BaseConsumeRecord> query = getDatastore().createQuery(getEntityClass()).order("-time");//		if(0 == type || 1 == type){//			// 充值记录//			query.or(query.criteria("type").equal(KConstants.ConsumeType.USER_RECHARGE),query.criteria("type").equal(KConstants.ConsumeType.SYSTEM_RECHARGE));// 过滤用户充值和后台//		}else if(2 == type){//			// 提现记录//			query.or(query.criteria("type").equal(KConstants.ConsumeType.PUT_RAISE_CASH),query.criteria("type").equal(KConstants.ConsumeType.SYSTEM_HANDCASH));// 过滤用户充值和后台//		}else if(3 == type){//			// 后台充值//			query.field("type").equal(KConstants.ConsumeType.SYSTEM_RECHARGE);//		}else if(4 == type){//			// APP充值//			query.field("type").equal(KConstants.ConsumeType.USER_RECHARGE);//		}////		if(0 != userId)//			query.filter("userId", userId);//		if(!StringUtil.isEmpty(tradeNo))//			query.filter("tradeNo", tradeNo);		long startTime = 0; //开始时间（秒）		long endTime = 0; //结束时间（秒）,默认为当前时间		long formateEndtime = 0;		if(!StringUtil.isEmpty(startDate) && !StringUtil.isEmpty(endDate)){			startTime = StringUtil.isEmpty(startDate) ? 0 :DateUtil.toDate(startDate).getTime()/1000;			endTime = StringUtil.isEmpty(endDate) ? DateUtil.currentTimeSeconds() : DateUtil.toDate(endDate).getTime()/1000;			formateEndtime = DateUtil.getOnedayNextDay(endTime,1,0);//			query.field("time").greaterThan(startTime).field("time").lessThanOrEq(formateEndtime);		}//		List<BaseConsumeRecord> recordList = query.asList(pageFindOption(page, limit, 1));		result = consumeRecordDao.getConsumRecordList(userId,type,tradeNo,startTime,formateEndtime,page,limit,(byte)1);		for(BaseConsumeRecord record : result.getData()){			record.setUserName(userCoreService.getNickName(record.getUserId()));			if(-1 == record.getManualPay_status() || 0 == record.getStatus()){				continue;			}			BigDecimal bd1 = new BigDecimal(Double.toString(totalMoney));	        BigDecimal bd2 = new BigDecimal(Double.toString(record.getMoney()));			totalMoney =  bd1.add(bd2).doubleValue();		}//		result.setCount(query.count());		log.info("当前总金额："+totalMoney);		result.setTotal(totalMoney);//		result.setData(recordList);		return result;	}		/**	 * 用户付款记录	 * @param userId	 * @param type	 * @param page	 * @param limit	 * @param startDate	 * @param endDate	 * @return	 */	public PageResult<BaseConsumeRecord> payment(int userId, int type, int page, int limit, String startDate, String endDate){		double totalMoney = 0;		PageResult<BaseConsumeRecord> result = new PageResult<BaseConsumeRecord>();//		Query<BaseConsumeRecord> query = getDatastore().createQuery(getEntityClass()).order("-time");//		if(0 != type)//			query.filter("type", type);//		else//			query.or(query.criteria("type").equal(KConstants.ConsumeType.SEND_PAYMENTCODE),query.criteria("type").equal(KConstants.ConsumeType.SEND_QRCODE));// 过滤用户付款码付款和二维码付款//		if(0 != userId)//			query.filter("userId", userId);		long startTime = 0; //开始时间（秒）		long endTime = 0; //结束时间（秒）,默认为当前时间		long formateEndtime = 0;		if(!StringUtil.isEmpty(startDate) && !StringUtil.isEmpty(endDate)){			startTime = StringUtil.isEmpty(startDate) ? 0 :DateUtil.toDate(startDate).getTime()/1000;//			DateUtil.getTodayNight();			endTime = StringUtil.isEmpty(endDate) ? DateUtil.currentTimeSeconds() : DateUtil.toDate(endDate).getTime()/1000;			formateEndtime = DateUtil.getOnedayNextDay(endTime,1,0);//			query.field("time").greaterThan(startTime).field("time").lessThanOrEq(formateEndtime);		}//		List<BaseConsumeRecord> recordList = query.asList(pageFindOption(page, limit, 1));		result = consumeRecordDao.getConsumRecordPayList(userId,type,startTime,formateEndtime,page,limit,(byte)1);		for(BaseConsumeRecord record : result.getData()){			BigDecimal bd1 = new BigDecimal(Double.toString(totalMoney)); 	        BigDecimal bd2 = new BigDecimal(Double.toString(record.getMoney())); 			totalMoney =  bd1.add(bd2).doubleValue();			record.setUserName(userCoreService.getNickName(record.getUserId()));		}//		result.setCount(recordList.size());		log.info("当前总金额："+totalMoney);		result.setTotal(totalMoney);//		result.setData(recordList);		return result;	}	public double getUserPayMoney(int userId,int type,int status, long startDate, long endDate){		return consumeRecordDao.getUserPayMoney(userId,type,status,startDate,endDate);	}    public ConsumRecordCountDTO queryConsumeRecordCount(Integer userId, long startTime, long endTime, int pageIndex, int pageSize,														boolean needCountBool, boolean next) {		return consumeRecordDao.queryConsumeRecordCount(userId,startTime,endTime,pageIndex,pageSize,needCountBool,next);    }    public BillRecordCountDTO queryBillRecordCount(long startTime, long endTime,int type){        BillRecordCountDTO billRecordCountDTO = consumeRecordDao.queryCashGroupCount(startTime, endTime);        String rechargeGroupCount = consumeRecordDao.queryRechargeGroupCount(startTime, endTime);        billRecordCountDTO.setRechargeTotal(rechargeGroupCount);        return billRecordCountDTO;    }}