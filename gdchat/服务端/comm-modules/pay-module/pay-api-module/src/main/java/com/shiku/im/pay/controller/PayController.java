package com.shiku.im.pay.controller;import com.alibaba.fastjson.JSONObject;import com.shiku.im.api.service.base.AbstractController;import com.shiku.im.comm.constants.KConstants;import com.shiku.im.comm.constants.KConstants.ResultCode;import com.shiku.im.comm.ex.ServiceException;import com.shiku.im.comm.utils.DateUtil;import com.shiku.im.comm.utils.ReqUtil;import com.shiku.im.pay.constants.PayResultCode;import com.shiku.im.pay.service.PayRedisService;import com.shiku.im.pay.service.impl.ConsumeRecordManagerImpl;import com.shiku.im.pay.service.impl.PayServiceImpl;import com.shiku.im.pay.utils.OtpHelper;import com.shiku.im.api.service.AuthServiceOldUtils;import com.shiku.im.api.service.AuthServiceUtils;import com.shiku.im.user.dao.UserCoreDao;import com.shiku.im.user.entity.User;import com.shiku.im.user.model.KSession;import com.shiku.im.user.service.UserCoreRedisRepository;import com.shiku.im.user.service.impl.AuthKeysServiceImpl;import com.shiku.im.utils.ConstantUtil;import com.shiku.im.utils.SKBeanUtils;import com.shiku.im.vo.JSONMessage;import com.shiku.utils.Base64;import com.shiku.utils.StringUtil;import com.shiku.utils.encrypt.AES;import com.wxpay.utils.GetWxOrderno;import com.wxpay.utils.MD5Util;import com.wxpay.utils.WXPayUtil;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.text.SimpleDateFormat;import java.util.*;/** *  * @Description: TODO(支付收款相关) *  * @date 2019年2月16日 下午6:08:53 * @version V1.0 */@RestController@Api(value="PayController",tags="支付收款相关")@RequestMapping(value="/pay",method={RequestMethod.GET,RequestMethod.POST})public class PayController extends AbstractController {		@Autowired	private PayServiceImpl payService;	@Autowired	private AuthKeysServiceImpl authKeysService;	@Autowired	private PayRedisService payRedisService;	@Autowired	private UserCoreRedisRepository userCoreRedisRepository;	@Autowired	private UserCoreDao userCoreDao;	@Autowired	private AuthServiceUtils authServiceUtils;	@Autowired	private AuthServiceOldUtils authServiceOldUtils;	@Autowired	private ConsumeRecordManagerImpl consumeRecordManager;	/**	 * 条码、付款码支付(付款)	 * @param paymentCode	 * @param money	 * @param secret	 * @return	 */	@ApiOperation("条码、付款码支付(付款)")	@ApiImplicitParams({			@ApiImplicitParam(paramType = "query",name = "paymentCode",value = "付款码",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "money",value = "付款金额",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "time",value = "时间",dataType = "long",required = true,defaultValue = "0"),			@ApiImplicitParam(paramType = "query",name = "desc",value = "详情",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "secret",value = "加密字符",dataType = "String",required = true),			@ApiImplicitParam(paramType = "query",name = "salt",value = "盐加密",dataType = "String",required = true)	})	@RequestMapping(value = "/codePayment")	public JSONMessage codePayment(@RequestParam(defaultValue="") String paymentCode, @RequestParam(defaultValue="") String money,								   @RequestParam(defaultValue="0") long time, @RequestParam(defaultValue="") String desc, @RequestParam(defaultValue="") String secret, String salt){		if(true){			return JSONMessage.failureByErrCode(ResultCode.PleaseUpgradeLatestVersion);		}		// 解析付款码		Integer fromUserId=payService.analysisCode(paymentCode);		if(fromUserId==null){			return JSONMessage.failureByErrCode(PayResultCode.PayCodeWrong);		}		// 校验付款码唯一性		if(payService.checkPaymentCode(fromUserId, paymentCode)){			return JSONMessage.failureByErrCode(PayResultCode.PayCodeExpired);		}		Integer userId=ReqUtil.getUserId();		// 不支持向自己付款		if(userId.equals(fromUserId)){			return JSONMessage.failureByErrCode(PayResultCode.NotPayWithSelf);		}		if(userId.equals(fromUserId)){			return JSONMessage.failureByErrCode(PayResultCode.NotPayWithSelf);		}		if(StringUtil.isEmpty(salt)){			// 校验加密规则			if(!authServiceOldUtils.authPaymentCode(paymentCode, userId.toString(), money, getAccess_token(), time, secret)){				return JSONMessage.failureByErrCode(ResultCode.AUTH_FAILED);			}		}		// 判断单笔交易是否超过限制		Double amount = Double.valueOf(money);		if(amount> SKBeanUtils.getImCoreService().getPayConfig().getMaxCodePaymentAmount()){			return JSONMessage.failureByErrCode(PayResultCode.ExceedMaxAmount);		}		// 判断单日交易是否超过限制		Double todayMoney = consumeRecordManager.getUserPayMoney(userId, KConstants.ConsumeType.SEND_PAYMENTCODE,KConstants.OrderStatus.END, DateUtil.getTodayMorning().getTime()/1000 ,DateUtil.getTodayNight().getTime()/1000);		todayMoney = todayMoney + amount;		if(todayMoney>SKBeanUtils.getImCoreService().getPayConfig().getDayMaxCodePayAmount()){			return JSONMessage.failureByErrCode(PayResultCode.ExceedDayMaxAmount);		}		try {				// 用户金额操作				payService.paymentCodePay(null,paymentCode,userId, fromUserId, money,desc);				return JSONMessage.success();			} catch (Exception e) {				return JSONMessage.failureByException(e);			}						}	/**	 * 二维码收款设置金额	 * @param money	 * @return	 */	@ApiOperation("二维码收款设置金额")	@ApiImplicitParam(paramType = "query",name = "money",value = "设置金额",dataType = "String",required = true)	@RequestMapping(value = "/setMoney")	public JSONMessage setMoney(@RequestParam(defaultValue="") String money){		return null;			}		/**	 * 二维码收款	 * @param toUserId 收款人（金钱增加）	 * @param money	 * @param secret	 * @return	 */	@ApiOperation("二维码收款")	@ApiImplicitParams({			@ApiImplicitParam(paramType = "query",name = "toUserId",value = "目标用户编号",dataType = "int",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "money",value = "付款金额",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "time",value = "时间",dataType = "long",required = true,defaultValue = "0"),			@ApiImplicitParam(paramType = "query",name = "desc",value = "详情",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "secret",value = "加密字符",dataType = "String",required = true),			@ApiImplicitParam(paramType = "query",name = "salt",value = "盐加密",dataType = "String",required = true)	})	@RequestMapping(value = "/codeReceipt")	public JSONMessage codeTransfer(@RequestParam(defaultValue="") Integer toUserId,@RequestParam(defaultValue="") String money,@RequestParam(defaultValue="0") long time,			@RequestParam(defaultValue="") String desc,@RequestParam(defaultValue="") String secret,String salt){		if(true){			return JSONMessage.failureByErrCode(ResultCode.PleaseUpgradeLatestVersion);		}		Integer userId=ReqUtil.getUserId();		if(userId.equals(toUserId)){			return JSONMessage.failureByErrCode(PayResultCode.NotPayWithSelf);		}		String token=getAccess_token();		String payPassword = authKeysService.getPayPassword(userId);		if(StringUtil.isEmpty(salt)){			// 校验加密规则			if(!authServiceOldUtils.authQRCodeReceipt(userId.toString(), token, money, time,payPassword,secret)){				return JSONMessage.failureByErrCode(PayResultCode.PayPasswordNotExist);			}		}		// 判断单笔交易是否超过限制		Double amount = Double.valueOf(money);		if(amount>SKBeanUtils.getImCoreService().getPayConfig().getMaxCodeReceiptAmount()){			return JSONMessage.failureByErrCode(PayResultCode.ExceedMaxAmount);		}		// 判断单日交易是否超过限制		Double todayMoney = consumeRecordManager.getUserPayMoney(userId,KConstants.ConsumeType.SEND_QRCODE,KConstants.OrderStatus.END, DateUtil.getTodayMorning().getTime()/1000 ,DateUtil.getTodayNight().getTime()/1000);		todayMoney = todayMoney + amount;		if(todayMoney>SKBeanUtils.getImCoreService().getPayConfig().getDayMaxCodeReceiptAmount()){			return JSONMessage.failureByErrCode(PayResultCode.ExceedDayMaxAmount);		}		try {			payService.receipt(userId, toUserId, money,desc);			return JSONMessage.success();		} catch (Exception e) {			return JSONMessage.failureByException(e);		}	}		/**	 * 二维码收款	 * @param toUserId 收款人（金钱增加）	 * @param money	 * @param secret	 * @return	 */	@ApiOperation("二维码收款")	@ApiImplicitParams({			@ApiImplicitParam(paramType = "query",name = "codeId",value = "编号",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "data",value = "付款金额",dataType = "String",required = true,defaultValue = "")	})	@RequestMapping(value = "/codeReceipt/v1")	public JSONMessage codeTransferV1(@RequestParam(defaultValue="") String codeId,@RequestParam(defaultValue="") String data){		Integer userId=ReqUtil.getUserId();				String token=getAccess_token();		String payPassword = authKeysService.getPayPassword(userId);		// 校验加密规则		JSONObject jsonObject = authServiceUtils.authQrCodeTransfer(userId, token, data, codeId,payPassword);		if(null==jsonObject) 			return JSONMessage.failureByErrCode(ResultCode.AUTH_FAILED);		Integer toUserId = jsonObject.getInteger("toUserId");		if(userId.equals(toUserId)){			return JSONMessage.failureByErrCode(PayResultCode.NotPayWithSelf);		}		// 判断单笔交易是否超过限制		Double amount = Double.valueOf(jsonObject.getString("money"));		if(amount>SKBeanUtils.getImCoreService().getPayConfig().getMaxCodeReceiptAmount()){			return JSONMessage.failureByErrCode(PayResultCode.ExceedMaxAmount);		}		// 判断单日交易是否超过限制		Double todayMoney = consumeRecordManager.getUserPayMoney(userId,KConstants.ConsumeType.SEND_QRCODE,KConstants.OrderStatus.END, DateUtil.getTodayMorning().getTime()/1000 ,DateUtil.getTodayNight().getTime()/1000);		todayMoney = todayMoney + amount;		if(todayMoney>SKBeanUtils.getImCoreService().getPayConfig().getDayMaxCodeReceiptAmount()){			return JSONMessage.failureByErrCode(PayResultCode.ExceedDayMaxAmount);		}		try {			payService.receipt(userId,jsonObject.getInteger("toUserId")					,jsonObject.getString("money"),jsonObject.getString("desc"));			return JSONMessage.success();		} catch (Exception e) {			return JSONMessage.failureByException(e);		}	}		/**	 * 统一下单接口	 * appId	 * body 商品描述	 * input_charset 编码格式	 * nonce_str 随机生成的数	 * notify_url 回调的url	 * sign 签名	 * spbill_create_ip 请求的Ip	 * total_fee 总费用	 * trade_no 交易订单	 * trade_type 交易类型：APP,WEB	 * @return prepayId	 */	@ApiOperation("统一下单接口")	@RequestMapping(value = "/unifiedOrder")	public JSONMessage unifiedOrder(HttpServletRequest request,HttpServletResponse response){		try {			 Map<String, String> map = null;			 Enumeration<String>  enums=request.getParameterNames();			 while(enums.hasMoreElements()){                     String  paramName=(String)enums.nextElement();                                         map=GetWxOrderno.doXMLParse(paramName); 			 }  			JSONMessage data = payService.unifiedOrderImpl(map);			return data;		} catch (Exception e) {			return JSONMessage.failureByException(e);		}	}		/**	 * 获取预支付订单信息	 * @param appId	 * @param prepayId	 * @return	 */	@ApiOperation(" 获取预支付订单信息")	@ApiImplicitParams({			@ApiImplicitParam(paramType = "query",name = "appId",value = "编号",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "prepayId",value = "预付编号",dataType = "String",required = true,defaultValue = "")	})	@RequestMapping(value = "/getOrderInfo")	public JSONMessage getOrderInfo(@RequestParam(defaultValue="") String appId,@RequestParam(defaultValue="") String prepayId){		JSONMessage data = payService.getOrderInfo(appId, prepayId);		return data;	}		/**	 * 确认密码支付	 * @param appId	 * @param prepayId	 * @param sign	 * @return	 */	@ApiOperation("确认密码支付")	@ApiImplicitParams({			@ApiImplicitParam(paramType = "query",name = "appId",value = "编号",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "prepayId",value = "预付编号",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "sign",value = "签名",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "time",value = "时间",dataType = "long",required = true,defaultValue = "0"),			@ApiImplicitParam(paramType = "query",name = "secret",value = "加密值",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "salt",value = "盐加密值",dataType = "String",required = true,defaultValue = "")	})	@RequestMapping(value = "/passwordPayment")	public JSONMessage passwordPayment(@RequestParam(defaultValue="") String appId,@RequestParam() String prepayId,			@RequestParam(defaultValue="") String sign,@RequestParam(defaultValue="0") long time,@RequestParam(defaultValue="") String secret,String salt){		if(true){			return JSONMessage.failureByErrCode(ResultCode.PleaseUpgradeLatestVersion);		}		Integer userId=ReqUtil.getUserId();		String token=getAccess_token();		if(StringUtil.isEmpty(salt)){			User user=userCoreDao.get(userId);			if(!authServiceOldUtils.authPaymentSecret(userId.toString(), token, user.getPayPassword(), time, secret)){				throw new ServiceException(ResultCode.AUTH_FAILED);			}		}		try {			return payService.passwordPayment(appId,prepayId,sign,userId,token,time,secret,salt);		} catch (Exception e) {			return JSONMessage.failureByException(e);		}	}	/**	 * 确认密码支付	 * @return	 */	@ApiOperation("确认密码支付")	@ApiImplicitParams({			@ApiImplicitParam(paramType = "query",name = "codeId",value = "编号",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "data",value = "加密参数",dataType = "String",required = true,defaultValue = "")	})	@RequestMapping(value = "/passwordPayment/v1")	public JSONMessage passwordPaymentV1(@RequestParam(defaultValue="") String codeId,@RequestParam(defaultValue="") String data){		Integer userId=ReqUtil.getUserId();		String token=getAccess_token();		String payPassword = authKeysService.getPayPassword(userId);		// 校验加密规则		JSONObject jsonObj = authServiceUtils.authOrderPay(userId, token, data, codeId,payPassword);		if(null==jsonObj)			return JSONMessage.failureByErrCode(ResultCode.AUTH_FAILED);		try {			boolean result = payService.passwordPaymentV1(jsonObj.getString("appId"), jsonObj.getString("prepayId"),					jsonObj.getString("sign"), userId);			if(result){				return JSONMessage.success();			}else {				return JSONMessage.failureByErrCode(PayResultCode.PayPasswordIsWrong);			}		} catch (Exception e) {			return JSONMessage.failureByException(e);		}	}	/**	 *获取二维码 支付  Key	 * @return	 **/	@ApiOperation("获取二维码 支付  Key")	@ApiImplicitParams({			@ApiImplicitParam(paramType = "query",name = "codeId",value = "编号",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "data",value = "加密参数",dataType = "String",required = true,defaultValue = "")	})	@RequestMapping(value = "/getQrKey")	public JSONMessage payGetQrKey(@RequestParam(defaultValue ="")String data,								   @RequestParam(defaultValue="") String codeId) {		int userId=ReqUtil.getUserId();       try {		   String code = payRedisService.queryTransactionSignCode(userId, codeId);		 if(StringUtil.isEmpty(code))			   return JSONMessage.failureByErrCode(ResultCode.AUTH_FAILED);		   payRedisService.cleanTransactionSignCode(userId,codeId);		   byte[] deCode= Base64.decode(code);		   String payPassword = authKeysService.getPayPassword(userId);		   JSONObject jsonObj = authServiceUtils.authPayGetQrKey(userId, getAccess_token(), data, deCode,payPassword);		   if(null==jsonObj)			   return JSONMessage.failureByErrCode(ResultCode.AUTH_FAILED);			String qrKey=payService.getPayQrKey(userId);		    qrKey= AES.encryptBase64(Base64.decode(qrKey),deCode);		   Map<String, Object> dataMap=new HashMap<>();		   dataMap.put("data",qrKey);		   return JSONMessage.success(dataMap);		} catch (ServiceException e) {		   return JSONMessage.failureByException(e);	   }	}	/**	 *获取二维码 支付  Key	 * @return	 **/	@ApiOperation("验证二维码支付Key")	@ApiImplicitParams({			@ApiImplicitParam(paramType = "query",name = "mac",value = "加密后值",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "salt",value = "盐加密值",dataType = "String",required = true,defaultValue = "")	})	@RequestMapping(value = "/verifyQrKey")	public JSONMessage verifyQrKey(@RequestParam(defaultValue ="")String mac,								   @RequestParam(defaultValue="") String salt) {		int userId=ReqUtil.getUserId();		try {			String qrKey = payRedisService.queryPayQrKey(userId);			if(StringUtil.isEmpty(qrKey)){					return JSONMessage.failureByErrCode(PayResultCode.PayQRKeyExpired);			}			byte[] deCode= Base64.decode(qrKey);			if(!authServiceUtils.authPayVerifyQrKey(userId, getAccess_token(), deCode,salt,mac))				return JSONMessage.failureByErrCode(ResultCode.AUTH_FAILED);			return JSONMessage.success();		}catch (ServiceException e) {			return JSONMessage.failureByException(e);		}	}	/**	 * 条码、付款码支付(付款)	 * @return	 */	@ApiOperation("条码、付款码支付(付款) 新版")	@ApiImplicitParams({			@ApiImplicitParam(paramType = "query",name = "salt",value = "盐加密值",dataType = "String",required = true,defaultValue = ""),			@ApiImplicitParam(paramType = "query",name = "data",value = "加密参数",dataType = "String",required = true,defaultValue = "")	})	@RequestMapping(value = "/codePayment/v1")	public JSONMessage codePaymentV1(@RequestParam(defaultValue="") String data,String salt){		int userId=ReqUtil.getUserId();		try {			KSession session = userCoreRedisRepository.queryUserSesson(getAccess_token());			if(null==session){				return JSONMessage.failureByErrCode(ResultCode.AUTH_FAILED);			}			JSONObject jsonObject = authServiceUtils.decodeDataToJson(data, Base64.decode(session.getPayKey()));			if(null==jsonObject)				return JSONMessage.failureByErrCode(ResultCode.AUTH_FAILED);			String paymentCode = jsonObject.getString("paymentCode");			String money=jsonObject.getString("money");			if(StringUtil.isEmpty(paymentCode)||StringUtil.isEmpty(money)){				return JSONMessage.failureByErrCode(ResultCode.AUTH_FAILED);			}			OtpHelper.QrCode qrCode = OtpHelper.parse(paymentCode);			if(null==qrCode){				return JSONMessage.failureByErrCode(ResultCode.AUTH_FAILED);			}else if(userId==qrCode.getUserId()){				return JSONMessage.failureByErrCode(PayResultCode.NotPayWithSelf);			}			// 判断单笔交易是否超过限制			Double amount = Double.valueOf(money);			if(amount>SKBeanUtils.getImCoreService().getPayConfig().getMaxCodePaymentAmount()){				return JSONMessage.failureByErrCode(PayResultCode.ExceedMaxAmount);			}			// 判断单日交易是否超过限制			Double todayMoney = consumeRecordManager.getUserPayMoney( qrCode.getUserId(),KConstants.ConsumeType.SEND_PAYMENTCODE,KConstants.OrderStatus.END, DateUtil.getTodayMorning().getTime()/1000 ,DateUtil.getTodayNight().getTime()/1000);			todayMoney = todayMoney + amount;			if(todayMoney>SKBeanUtils.getImCoreService().getPayConfig().getDayMaxCodePayAmount()){				return JSONMessage.failureByErrCode(PayResultCode.ExceedDayMaxAmount);			}			// 用户金额操作			payService.paymentCodePay(qrCode,paymentCode,userId, qrCode.getUserId(), money,"");			return JSONMessage.success();		} catch (Exception e) {			return JSONMessage.failureByException(e);		}	}	/**	 * 测试程序	 * @param money	 * @return	 */	@ApiOperation("测试程序")	@ApiImplicitParam(paramType = "query",name = "money",value = "金额",dataType = "String",required = true,defaultValue = "")	@RequestMapping(value= "/SKPayTest")	public JSONMessage skPayTest(@RequestParam(defaultValue="") String money){		String totalFee= money;		// 随机字符串		String nonce_str = getNonceStr();				SortedMap<String, String> contentMap = new TreeMap<String, String>();				contentMap.put("appId", "im96d738a743d048ad");		contentMap.put("body", "测试APP");		contentMap.put("input_charset", "UTF-8");		contentMap.put("nonce_str", nonce_str);		contentMap.put("notify_url", "http://192.168.0.168:8092/user/recharge/wxPayCallBack");				contentMap.put("spbill_create_ip", "121.121.121.121");		// 这里写的金额为1 分到时修改		contentMap.put("total_fee", totalFee);		contentMap.put("out_trade_no", StringUtil.getOutTradeNo());		contentMap.put("trade_type", "WEB");		String sign = createSign(contentMap);		contentMap.put("sign", sign);				String xml = WXPayUtil.paramsToxmlStr(contentMap);		String prepay_id = new GetWxOrderno().getPayNo("http://192.168.0.168:8092/pay/unifiedOrder", xml);		System.out.println("返回数据 "+prepay_id);		Map<String, String> map = new HashMap<>();		map.put("prepay_id", prepay_id);		map.put("sign", sign);		return JSONMessage.success(map);	}	/**	 * 创建md5摘要,规则是:按参数名称a-z排序,遇到空值的参数不参加签名。	 */	public static String createSign(SortedMap<String, String> packageParams) {		StringBuffer sb = new StringBuffer();		Set es = packageParams.entrySet();		Iterator it = es.iterator();		while (it.hasNext()) {			Map.Entry entry = (Map.Entry) it.next();			String k = (String) entry.getKey();			String v = (String) entry.getValue();			if (null != v && !"".equals(v) && !"sign".equals(k)					&& !"key".equals(k)) {				sb.append(k + "=" + v + "&");				//System.out.println(k+"----"+v);			}		}//		sb.append("key=" + this.getKey());		//System.out.println("key====="+this.getKey());		String sign = MD5Util.MD5Encode(sb.toString(), "UTF-8")				.toUpperCase();		return sign;	}				/**	 * 获取随机字符串	 * @return	 */	public static String getNonceStr() {		// 随机数		String currTime = getCurrTime();		// 8位日期		String strTime = currTime.substring(5, currTime.length());		// 四位随机数		String strRandom = buildRandom(4) + "";		// 10位序列号,可以自行调整。		return strTime + strRandom;	}		/**	 * 获取当前时间 yyyyMMddHHmmss	 * @return String	 */ 	public static String getCurrTime() {		Date now = new Date();		SimpleDateFormat outFormat = new SimpleDateFormat("yyyyMMddHHmmss");		String s = outFormat.format(now);		return s;	}		/**	 * 取出一个指定长度大小的随机正整数.	 * 	 * @param length	 *            int 设定所取出随机数的长度。length小于11	 * @return int 返回生成的随机数。	 */	public static int buildRandom(int length) {		int num = 1;		double random = Math.random();		if (random < 0.1) {			random = random + 0.1;		}		for (int i = 0; i < length; i++) {			num = num * 10;		}		return (int) ((random * num));	}}