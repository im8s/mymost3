package com.shiku.im.utils;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.mongodb.client.MongoCollection;import com.mongodb.client.MongoCursor;import com.shiku.commons.thread.ThreadUtils;import com.shiku.im.comm.ex.ServiceException;import com.shiku.im.config.AppConfig;import com.shiku.im.entity.PayConfig;import com.shiku.im.model.Constant;import com.shiku.im.model.ErrorMessage;import com.shiku.im.model.Language;import com.shiku.im.support.Callback;import com.shiku.utils.StringUtil;import org.bson.Document;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.stereotype.Component;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.Map;@Componentpublic class ConstantUtil   {	private static Map<String, Map<String,String>> errorMsgMap = Maps.newHashMap();		public static MongoTemplate dsForRW;	public static void  setMongoTemplate(MongoTemplate mongoTemplate){		dsForRW=mongoTemplate;	};	private static String uploadDomain="";	private static AppConfig appConfig=null;//	public static PayConfig payConfig = null;	public static void setAppConfig(AppConfig config){		appConfig=config;		uploadDomain=config.getUploadDomain();	}//	public static void setPayConfig(PayConfig config){//		payConfig = config;//	}	public static Document staticProjection;		public final static String defLanguage="zh";		static{		staticProjection=new Document("id", 1);		staticProjection.append(defLanguage, 1);		staticProjection.append("zh", 1);		staticProjection.append("_id", 0);	}		public static int getAppDefDistance(){		return 20;	}		/**	 * 通过url 删除文件	 * @param url	 * @throws Exception 	 */	public static void deleteFile(String... paths){		try {			//调用删除方法将文件从服务器删除			FileUtil.deleteFileToUploadDomain(uploadDomain,paths);		} catch (Exception e) {			System.err.println(e.getMessage());		}			}			/**	 * 	 * @param 复制文件	 * @param language	 * @return	 */	public static String copyFile(int validTime,String... paths) {		String url=null;		try {			url = FileUtil.copyFileToUploadDomain(uploadDomain, validTime, paths);		} catch (ServiceException e) {			throw new ServiceException("文件服务器连接超时");		} 		return url;	}		public static String getMsgByCode(String code) {		 return getMsgByCode(code, defLanguage);	}	public static String getMsgByCode(String code,String language) {		 if(StringUtil.isEmpty(language))				language=defLanguage;		Map<String,String> map=errorMsgMap.get(code);		if(null!=map){			if(StringUtil.isEmpty(map.get(language)))				return map.get(defLanguage);			return map.get(language);		}		if(null==dsForRW){			return code;		}		MongoCollection<Document> collection=dsForRW.getCollection("message");		Document query=new Document("code", code);		Document projection=new Document(language, 1);		projection.append("code",1);		Document obj=  collection.find(query).projection(projection).first();			if(null==obj)				return null;			if(StringUtil.isEmpty(obj.getString(language)))				return obj.getString(defLanguage);			return obj.getString(language);	}	public static List<Constant> getMsgByType(String type, String language) {		//return mapConstant.get(id);		List<Constant> list=Lists.newArrayList();		MongoCollection<Document> collection=dsForRW.getCollection("message");		 if(StringUtil.isEmpty(language))				language="zh";		 Document query=new Document("type", type);		Document projection=new Document(language, 1);		projection.append("code",1);		MongoCursor<Document> cursor =collection.find(query).projection(projection).iterator();		if(null==cursor)			return null;		Constant constant=null;		Document obj =null;		while (cursor.hasNext()) {				obj =  cursor.next();				constant=new Constant();				constant.setCode(obj.getString("code"));				if(!StringUtil.isEmpty(obj.getString(language)))					constant.setValue(obj.getString(language));				else constant.setValue(obj.getString(defLanguage));				constant.setName(obj.getString("zh"));				list.add(constant);		}				return list;	}	public static Map<String, String> getMsgMapByType(String type,String language) {		//return mapConstant.get(id);		Map<String, String> map=Maps.newHashMap();		MongoCollection<Document> collection=dsForRW.getCollection("message");		 if(StringUtil.isEmpty(language))				language="zh";		Document query=new Document("type", type);		Document projection=new Document(language, 1);		projection.append("code",1);		MongoCursor<Document> cursor =collection.find(query).projection(projection).iterator();		if(null==cursor)			return null;		Document obj =null;		String value=null;		while (cursor.hasNext()) {				obj =  cursor.next();				value=!StringUtil.isEmpty(obj.getString(language))?obj.getString(language):obj.getString(defLanguage);				map.put(obj.getString("code"),value);		}		return map;	}		public static String format(Long milliseconds, String pattern) {		Date date = new Date(milliseconds*1000);		String dateStr=new SimpleDateFormat(pattern).format(date);		return dateStr;	}		public static void updateErrorMessage(String code,Map<String, String> map) {		errorMsgMap.put(code, map);	}	public static void deleteErrorMessage(String code) {		errorMsgMap.remove(code);	}	public static void initMsgMap(){		System.out.println(" ConstantUtil----MsgMap--- init");		ThreadUtils.executeInThread(new Callback() {						@Override			public void execute(Object obj) {				if(null==dsForRW){					return ;				}				MongoCursor<Document> cursor = dsForRW.getCollection("message").find().iterator();				ErrorMessage errorMessage=null;				Document result=null;				Map<String,String> map=null;				while (cursor.hasNext()) {					 result =  cursor.next();					 errorMessage=new ErrorMessage();					 map=Maps.newHashMap();//					 errorMessage.setCode(result.getString("code"));//					 errorMessage.setName(result.getString("zh"));//					 errorMessage.setValue(result.getString("zh"));					for (Language language : appConfig.getLanguages()) {						map.put(language.getKey(), result.getString(language.getKey()));					}					//constant.setParentValue(ConstantUtil.getFunctionById(result.getInt("parent_id"), "").getValue());					errorMessage.setMap(map);					errorMsgMap.put(result.getString("code"), map);				}				System.out.println(" ConstantUtil----MsgMap--- End");			}		});					}}