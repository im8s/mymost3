spring.config.name=application-local
spring.config.location=classpath:application-local.properties

#imapi项目端口
server.port=6092

##开启https
server.openHttps=false
http.port=6092
#server.ssl.key-store=classpath:imapi.p12
#server.ssl.key-store-password=4bYKAC15
#server.ssl.key-store-type=PKCS12


#设置UTF-8格式
#解决程序读配置文件乱码问题
spring.messages.encoding=UTF-8
spring.main.allow-bean-definition-overriding=true

###tomcat 请求设置
server.max-http-header-size=1048576
server.tomcat.max-connections=3000
server.tomcat.max-http-post-size=1048576
server.tomcat.max-threads=1000

mongoconfig.uri=mongodb://127.0.0.1:28018
mongoconfig.dbName=imapi
mongoconfig.mapPackage=cn.xyz.mianshi.vo
mongoconfig.roomDbName=imRoom
mongoconfig.username=
mongoconfig.password=
mongoconfig.connectTimeout=20000
mongoconfig.socketTimeout=20000
mongoconfig.maxWaitTime=20000


#Redis Properties（缓存配置）
redisson.address=redis://127.0.0.1:6379
redisson.database=15
redisson.password=
redisson.pingTimeout=10000
redisson.timeout=10000
redisson.connectTimeout=10000
redisson.pingConnectionInterval=500



##APP Properties
appConfig.uploadDomain=http://127.0.0.1:6078
appConfig.apiKey=
appConfig.openTask=1
appConfig.distance=20
appConfig.qqzengPath=
#是否开启清除 admin token，开启后在项目启动时会清除redis里存的 admin token (admin token 用于管理后台、公众号页面、开放平台)
appConfig.openClearAdminToken=1
appConfig.languages[0].key=zh
appConfig.languages[0].name=\u4E2D\u6587 
appConfig.languages[0].value=\u7B80\u4F53\u4E2D\u6587
appConfig.languages[1].key=en
appConfig.languages[1].name=\u82F1\u6587
appConfig.languages[1].value=English
appConfig.languages[2].key=big5
appConfig.languages[2].name=\u7E41\u4F53
appConfig.languages[2].value=\u7E41\u4F53\u4E2D\u6587
appConfig.balanceVersion=0
appConfig.registerCreateRoom=1


## SMS Properties(短信配置)

##天天国际短信
smsConfig.host=m.isms360.com
smsConfig.port=8085
smsConfig.api=/mt/MT3.ashx
smsConfig.username=username
smsConfig.password=password
smsConfig.templateChineseSMS=【IM】,您的验证码为:
smsConfig.templateEnglishSMS=[IM], Your verification code is:
## 阿里云短信服务
smsConfig.product=Dysmsapi
smsConfig.domain=dysmsapi.aliyuncs.com
smsConfig.accesskeyid=
smsConfig.accesskeysecret=
smsConfig.signname=IM
smsConfig.chinase_templetecode=
smsConfig.english_templetecode=
smsConfig.cloudWalletVerification=
smsConfig.cloudWalletNotification=


rocketmq.name-server=127.0.0.1:9876
rocketmq.producer.group=xmppProducer
rocketmq.producer.send-message-timeout=30000


#XMPP Properties（XMPP主机和端口以及推送用户配置）
xmppConfig.host=127.0.0.1
xmppConfig.serverName=127.0.0.1
xmppConfig.port=6222
xmppConfig.username=10005
xmppConfig.password=10005
xmppConfig.dbUri=mongodb://127.0.0.1:28018
xmppConfig.dbName=tigase
xmppConfig.dbUsername=
xmppConfig.dbPassword=

###微信支付相关配置
wxConfig.appid=
wxConfig.mchid=1492798782
wxConfig.secret=
wxConfig.apiKey=
wxConfig.callBackUrl=http://imapi.server.com/user/recharge/wxPayCallBack
#wxConfig.pkPath=classpath:shiku.p12
wxConfig.pkPath=

aliPayConfig.appid=
aliPayConfig.app_private_key=
aliPayConfig.charset=utf-8
aliPayConfig.alipay_public_key=
aliPayConfig.callBackUrl=https://imapi.server.com:8094/alipay/callBack
aliPayConfig.pid =

wxPublicNum.appId=
wxPublicNum.appSecret=
pushConfig.betaAppId=com.kuxin.im1
pushConfig.appStoreAppId=com.shiku.im.push

swagger.enabled=false
swagger.title=接口服务
swagger.description=支付中心接口文档
swagger.version=1.0
swagger.base-package=com.shiku

##全局参数
swagger.globalOperationParameters.name[0]=access_token
swagger.globalOperationParameters.description[0]=
swagger.globalOperationParameters.parameterType[0]=query
swagger.globalOperationParameters.modelRef[0]=String
swagger.globalOperationParameters.required[0]=true

#不需要访问令牌(access-token)即可访问的接口
authorizationfilter.requestUriList[0]=/user/register
authorizationfilter.requestUriList[1]=/user/login
authorizationfilter.requestUriList[2]=/verify/telephone
authorizationfilter.requestUriList[3]=/basic/randcode/sendSms
authorizationfilter.requestUriList[4]=/user/password/reset
authorizationfilter.requestUriList[5]=/user/recharge/wxPayCallBack
authorizationfilter.requestUriList[6]=/user/recharge/aliPayCallBack
authorizationfilter.requestUriList[7]=/user/wxUserOpenId
authorizationfilter.requestUriList[8]=/user/getUserInfo
authorizationfilter.requestUriList[9]=/user/getWxUser
authorizationfilter.requestUriList[10]=/user/getWxUserbyId
authorizationfilter.requestUriList[11]=/CustomerService/register
authorizationfilter.requestUriList[12]=/user/getWxOpenId
authorizationfilter.requestUriList[13]=/user/registerSDK
authorizationfilter.requestUriList[14]=/user/sdkLogin
authorizationfilter.requestUriList[15]=/user/bindingTelephone
authorizationfilter.requestUriList[16]=/alipay/callBack
authorizationfilter.requestUriList[17]=/alipay/getAliUser
authorizationfilter.requestUriList[18]=/wxmeet
authorizationfilter.requestUriList[19]=/user/checkReportUrl
authorizationfilter.requestUriList[20]=/open/webAppCheck
authorizationfilter.requestUriList[21]=/pay/unifiedOrder
authorizationfilter.requestUriList[22]=/pay/SKPayTest
authorizationfilter.requestUriList[23]=/getQRCodeKey
authorizationfilter.requestUriList[24]=/qrCodeLoginCheck
authorizationfilter.requestUriList[25]=/user/register/v1
authorizationfilter.requestUriList[26]=/auth/getLoginCode
authorizationfilter.requestUriList[27]=/user/login/v1
authorizationfilter.requestUriList[28]=/user/smsLogin
authorizationfilter.requestUriList[29]=/user/bindingTelephone/v1
authorizationfilter.requestUriList[30]=/user/registerSDK/v1
authorizationfilter.requestUriList[31]=/user/sdkLogin/v1
authorizationfilter.requestUriList[32]=/authkeys/getLoginPrivateKey
authorizationfilter.requestUriList[33]=/authkeys/uploadLoginKey
authorizationfilter.requestUriList[34]=/getImgCode
authorizationfilter.requestUriList[35]=/user/login/auto/v1
authorizationfilter.requestUriList[36]=/config
authorizationfilter.requestUriList[37]=/open/authorization
authorizationfilter.requestUriList[38]=/authkeys/isSupportSecureChat
authorizationfilter.requestUriList[39]=/user/password/reset/v1
#authorizationfilter.requestUriList[40]=/console/exportData
authorizationfilter.requestUriList[40]=/console/exportExcelByFriends
authorizationfilter.requestUriList[41]=/console/exportExcelByGroupMember
authorizationfilter.requestUriList[42]=/user/deviceIsAuth
authorizationfilter.requestUriList[43]=/v2/api-docs
#authorizationfilter.requestUriList[45]=/tigase/shiku_msgs


#控制不同包下的日志级别(日志级别由低到高 trace < debug < info < warn < error)
##logging.level.helloWorldController=warn
 
#在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件
##logging.path=/spring/log
 
#可以指定完整的路径(logging.path和logging.file 配置一个即可)
#logging.file=E:/springboot.log

# 在控制台输出的日志格式（使用默认格式即可）
logging.pattern.console=%d{yyyy-MM-dd HH:mm} - %logger{50} %msg%n
# 指定文件中日志输出的格式（使用默认格式即可）
logging.pattern.file=%d{yyyy-MM-dd HH:mm} - %logger{50} %msg%n

## %d{HH: mm:ss.SSS}——日志输出时间
## %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
## %-5level——日志级别，并且使用5个字符靠左对齐
## %logger{36}——日志输出者的名字
## %msg——日志消息
## %n——平台的换行符
