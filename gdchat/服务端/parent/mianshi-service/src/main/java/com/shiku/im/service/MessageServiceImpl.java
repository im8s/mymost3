package com.shiku.im.service;import com.shiku.commons.thread.ThreadUtils;import com.shiku.im.comm.model.MessageBean;import com.shiku.im.config.XMPPConfig;import com.shiku.im.message.IMessageRepository;import com.shiku.im.message.MessageService;import com.shiku.im.model.PressureParam;import com.shiku.im.support.Callback;import com.shiku.im.vo.JSONMessage;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationContext;import org.springframework.stereotype.Component;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.ArrayList;import java.util.Collections;import java.util.List;import java.util.logging.Logger;@Component(value="messageService")public class MessageServiceImpl extends MessageService {	  private List<String> sysUserList=Collections.synchronizedList(new ArrayList<String>());	@Autowired	private IMessageRepository messageRepository;	private static ApplicationContext context;		private static final Logger log = Logger.getLogger(MessageServiceImpl.class			.getName());	public static MessageServiceImpl getInstance() {		return context.getBean(MessageServiceImpl.class);	}			@Autowired(required=false)	private XMPPConfig xmppConfig;	@Override	public void setTimeSend(com.shiku.im.comm.model.MessageBean messageBean) {		messageBean.setTimeSend(System.currentTimeMillis());	}	public void registerSystemNo(String userId, String password) throws Exception {		messageRepository.registerSystemNo(userId,password);			}		public void registerAndXmppVersion(String userId, String password){		messageRepository.registerAndXmppVersion(userId,password);	}	public void registerByThread(String userId, String password) throws Exception {		ThreadUtils.executeInThread(new Callback() {						@Override			public void execute(Object obj) {				registerAndXmppVersion(userId, password);			}		});	}		@Deprecated()	public void updateToTig(String userId, String password) {		try {			messageRepository.updateToTig(userId,password);		} catch (Exception e) {			e.printStackTrace();		}	}		/** @Description:（群控制消息）	* @param jid	* @param messageBean	* @throws Exception	**/	public void sendMsgToGroupByJid(String jid,MessageBean messageBean) throws Exception {		ThreadUtils.executeInThread(new Callback() {			@Override			public void execute(Object obj) {				sendMsgToMucRoom(messageBean, jid);			}		});	}	@Override	public JSONMessage pressureMucTest(PressureParam param, Integer userId) {		return null;	}	public void examineTigaseUser(String userId, String password){				try {			messageRepository.examineTigaseUser(userId,password);		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}					}		private byte[] generateId(String username) throws NoSuchAlgorithmException {		MessageDigest md = MessageDigest.getInstance("SHA-256");		return md.digest(username.getBytes());	}	@Override	public void createMucRoomToIMServer(String roomJid, String password, String userId, String roomName) {		//createMucRoom(roomJid,password,userId,roomName);	}	@Override	public void deleteTigaseUser(Integer userId) {		messageRepository.deleteTigaseUser(userId);	}		public static class MessageBean extends com.shiku.im.comm.model.MessageBean {					}}